#!/usr/bin/env python3

import argparse
import os

ALIGNMENT_STATISTICS_DESCRIPTION = "Reports alignment summary statistics for CRAM files"
SEX_INFERENCE_DESCRIPTION = "This section provides an analysis of sex inference based on genomic coverage data. The results are derived from coverage patterns across sex chromosomes, enabling the determination of the likely biological sex for each sample."
CONTAMINATION_DESCRIPTION = "This section provides an analysis of contamination levels of exogenous DNA or non-human organisms in the samples. The results are derived from Kraken reports, which classify the taxonomic composition of the samples based on their genomic data."
COVERAGE_DESCRIPTION = "This section provides an analysis of coverage levels in the samples. The results are derived from depth files generated by Samtools, which quantify the number of reads aligned to each position in the genome."


def get_options() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Create coverage graphs")
    parser.add_argument(
        "-a", "--alignment_statistics_files", nargs="+", help="alignement statistic file", required=True
    )
    parser.add_argument("-s", "--sex_inference_files", nargs="+", help="sex inference files", required=True)
    parser.add_argument("-c", "--coverage_plots", nargs="+", help="coverage plots", required=True)
    # parser.add_argument("-cn", "--contamination_plots", nargs="+", help="contamination plots", required=True)
    parser.add_argument("-o", "--output", help="Report Markdown file", default="report.md")
    options = parser.parse_args()

    return options


def extract_sample_name(filepath: str) -> str:
    return os.path.splitext(os.path.basename(filepath))[0]


def generate_txt_info(report, files, title, description):
    report.write(f"## {title}\n")
    report.write(f"{description}.\n\n")
    for file in files:
        sample_name = extract_sample_name(file)
        report.write(f"### Sample: {sample_name}\n")
        with open(file, "r") as f:
            data = f.read()
            report.write(f"```\n{data}\n```\n\n")


def generate_pdf_info(report, files, title, description):
    report.write(f"## {title}\n")
    report.write(f"{description}:\n\n")
    for file in files:
        sample_name = extract_sample_name(file)
        report.write(f"![{sample_name}]({file})\n\n")


def generate_markdown_report(alignment_statistics_files, sex_inference_files, coverage_plots, output):
    with open(output, "w") as report:
        report.write("# Analysis Report\n\n")
        generate_txt_info(report, alignment_statistics_files, "Alignment Statistics", ALIGNMENT_STATISTICS_DESCRIPTION)
        generate_txt_info(report, sex_inference_files, "Sex Inference Based on Coverage", SEX_INFERENCE_DESCRIPTION)
        generate_pdf_info(report, coverage_plots, "Genome Coverage", COVERAGE_DESCRIPTION)
        # generate_pdf_info(report, contamination_plots, "Genome Contamination", CONTAMINATION_DESCRIPTION)


def main():
    args = get_options()
    # generate_markdown_report(args.alignment_statistics_files, args.sex_inference_files, args.coverage_plots, args.contamination_plots, args.output)
    generate_markdown_report(
        args.alignment_statistics_files, args.sex_inference_files, args.coverage_plots, args.output
    )


if __name__ == "__main__":
    main()
