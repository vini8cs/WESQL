#!/usr/bin/env python3

import argparse
import os

ALIGNMENT_STATISTICS_DESCRIPTION = "Reports alignment summary statistics for CRAM files. Key metrics include total reads, mapped reads, duplicates, and properly paired reads. These statistics provide insights into sequencing quality and alignment efficiency."
SEX_INFERENCE_DESCRIPTION = "This section provides an analysis of sex inference based on genomic coverage data. The results are derived from coverage patterns across sex chromosomes, enabling the determination of the likely biological sex for each sample."
CONTAMINATION_DESCRIPTION = "This section provides an analysis of contamination levels of exogenous DNA or non-human organisms in the samples. The results are derived from Kraken reports, which classify the taxonomic composition of the samples based on their genomic data."
COVERAGE_DESCRIPTION = "This section provides an analysis of coverage levels in the samples. The results are derived from depth files generated by Samtools, which quantify the number of reads aligned to each position in the genome."


def get_options() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Create genome analysis report")
    parser.add_argument("-al", "--alignment_statistics_files", nargs="+", required=True)
    parser.add_argument("-s", "--sex_inference_files", nargs="+", required=True)
    parser.add_argument("-c", "--coverage_plots", nargs="+", required=True)
    parser.add_argument("-cn", "--contamination_plots", nargs="+", required=True)
    parser.add_argument("-ce", "--contamination_estimation", nargs="+", required=True)
    parser.add_argument("-o", "--output", default="report.md")
    parser.add_argument("-d", "--date", required=True)
    parser.add_argument("-a", "--author", required=True)
    return parser.parse_args()


def extract_sample_name(filepath: str) -> str:
    return os.path.splitext(os.path.basename(filepath))[0]


def write_report_header(report, author, date):
    report.write(
        f"""---
title: "Genome Analysis Report"
author: {author}
date: {date}
toc: true
toc-depth: 2
numbersections: true
fontsize: 11pt
geometry: margin=1in
---

"""
    )
    report.write("# Analysis Report\n\n")


def generate_txt_info(report, files, title, description):
    report.write(f"## {title}\n")
    report.write(f"{description}\n\n")
    for file in files:
        sample_name = extract_sample_name(file)
        report.write(f"### Sample: {sample_name}\n")
        with open(file, "r") as f:
            lines = f.readlines()

        values = {}
        for line in lines:
            if ":" in line:
                key, value = line.strip().split(":", 1)
                values[key.strip()] = value.strip()

        if values:
            for k, v in values.items():
                report.write(f"- **{k}**: {v}\n")
        else:
            report.write("```")
            report.write("".join(lines))
            report.write("```\n")

        if "Contamination" in values:
            level = float(values["Contamination"].replace("%", ""))
            if level < 1:
                comment = "Sample quality is high."
            else:
                comment = "Potential contamination detected."
            report.write(f"\n**Interpretation**: {comment}\n")

        elif "female" in "".join(lines).lower() or "male" in "".join(lines).lower():
            sex = "Female" if "female" in "".join(lines).lower() else "Male"
            report.write(f"\n**Interpretation**: The sample is likely biologically **{sex}**.\n")

        report.write("\n")


def generate_pdf_info(report, files, title, description, insert_pagebreak=False):
    report.write(f"## {title}\n")
    report.write(f"{description}\n\n")
    for file in files:
        sample_name = extract_sample_name(file)
        report.write(f"![{sample_name}]({file})\n")
        report.write(f"*Figure: {title} for sample {sample_name}*\n\n")
    if insert_pagebreak:
        report.write("\\clearpage\n\n")


def generate_markdown_report(
    author,
    date,
    alignment_statistics_files,
    sex_inference_files,
    coverage_plots,
    contamination_estimation,
    contamination_plots,
    output,
):
    with open(output, "w") as report:
        write_report_header(report, author, date)
        generate_txt_info(report, alignment_statistics_files, "Alignment Statistics", ALIGNMENT_STATISTICS_DESCRIPTION)
        generate_txt_info(report, sex_inference_files, "Sex Inference Based on Coverage", SEX_INFERENCE_DESCRIPTION)
        generate_pdf_info(report, coverage_plots, "Genome Coverage", COVERAGE_DESCRIPTION, insert_pagebreak=True)
        generate_txt_info(report, contamination_estimation, "Genome Contamination", CONTAMINATION_DESCRIPTION)
        generate_pdf_info(report, contamination_plots, "Genome Contamination Plots", "", insert_pagebreak=True)


def main():
    args = get_options()
    generate_markdown_report(
        args.author,
        args.date,
        args.alignment_statistics_files,
        args.sex_inference_files,
        args.coverage_plots,
        args.contamination_estimation,
        args.contamination_plots,
        args.output,
    )


if __name__ == "__main__":
    main()
